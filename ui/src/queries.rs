pub struct CharacterQuery ; pub mod character_query { # ! [allow (dead_code)] pub const OPERATION_NAME : & 'static str = "CharacterQuery" ; pub const QUERY : & 'static str = "query CharacterQuery {\n    characters {\n        id\n        name\n        class\n        level\n        background\n        race\n        alignment\n        experiencePoints\n        strength\n        dexterity\n        constitution\n        intelligence\n        wisdom\n        charisma\n        proficiencyBonus\n        hasInspiration\n        personalityTraits\n        ideals\n        bonds\n        flaws\n        featuresAndTraits\n        otherProficienciesAndLanguages\n        armorClass\n        speed\n        hitPoints\n        currentHitPoints\n        temporaryHitPoints\n        hitDice\n        usedHitDice\n        saves\n        failures\n        equipment\n        copper\n        silver\n        electrum\n        platinum\n        gold\n    }\n}\n" ; use serde :: { Serialize , Deserialize } ; # [allow (dead_code)] type Boolean = bool ; # [allow (dead_code)] type Float = f64 ; # [allow (dead_code)] type Int = i64 ; # [allow (dead_code)] type ID = String ; # [derive (Deserialize)] pub struct CharacterQueryCharacters { pub id : String , pub name : String , pub class : String , pub level : Int , pub background : String , pub race : String , pub alignment : String , # [serde (rename = "experiencePoints")] pub experience_points : Int , pub strength : Int , pub dexterity : Int , pub constitution : Int , pub intelligence : Int , pub wisdom : Int , pub charisma : Int , # [serde (rename = "proficiencyBonus")] pub proficiency_bonus : Int , # [serde (rename = "hasInspiration")] pub has_inspiration : Boolean , # [serde (rename = "personalityTraits")] pub personality_traits : String , pub ideals : String , pub bonds : String , pub flaws : String , # [serde (rename = "featuresAndTraits")] pub features_and_traits : String , # [serde (rename = "otherProficienciesAndLanguages")] pub other_proficiencies_and_languages : String , # [serde (rename = "armorClass")] pub armor_class : Int , pub speed : Int , # [serde (rename = "hitPoints")] pub hit_points : Int , # [serde (rename = "currentHitPoints")] pub current_hit_points : Int , # [serde (rename = "temporaryHitPoints")] pub temporary_hit_points : Int , # [serde (rename = "hitDice")] pub hit_dice : Int , # [serde (rename = "usedHitDice")] pub used_hit_dice : Int , pub saves : Int , pub failures : Int , pub equipment : String , pub copper : Int , pub silver : Int , pub electrum : Int , pub platinum : Int , pub gold : Int , } # [derive (Serialize)] pub struct Variables ; # [derive (Deserialize)] pub struct ResponseData { pub characters : Vec < CharacterQueryCharacters > , } } impl graphql_client :: GraphQLQuery for CharacterQuery { type Variables = character_query :: Variables ; type ResponseData = character_query :: ResponseData ; fn build_query (variables : Self :: Variables) -> :: graphql_client :: QueryBody < Self :: Variables > { graphql_client :: QueryBody { variables , query : character_query :: QUERY , operation_name : character_query :: OPERATION_NAME , } } }